{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.19", "generated_at": "2025-04-04T20:38:48.692246Z", "invocation_id": "03a0e4bd-9588-4ff3-aac7-8fd95036d9c9", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-04T20:38:46.781038Z", "completed_at": "2025-04-04T20:38:46.790489Z"}, {"name": "execute", "started_at": "2025-04-04T20:38:46.791371Z", "completed_at": "2025-04-04T20:38:47.361918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5836389064788818, "adapter_response": {"_message": "SUCCESS 0", "code": "SUCCESS", "rows_affected": 0}, "message": "SUCCESS 0", "failures": null, "unique_id": "model.dataforge_dbt.appointment_financials", "compiled": true, "compiled_code": "\n\nSELECT\n    appointment_id,\n    patient_id,\n    treatment_id,\n    dentist_id,\n    appointment_date,\n    total_cost,\n    insurance_coverage,\n    patient_payment,\n    \n    -- Berechneter Anteil, den der Patient selbst zahlt\n    ROUND((patient_payment / total_cost) * 100, 2) AS patient_share_percent,\n\n    -- Check: Summe von Versicherungsleistung + Patientenzahlung = Gesamtkosten?\n    ROUND(((insurance_coverage + patient_payment) / total_cost) * 100, 2) AS total_coverage_check\n\nFROM \n    `dataforge`.`fact_appointments`\nWHERE\n    total_cost > 0", "relation_name": "`dataforge`.`appointment_financials`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-04T20:38:47.367264Z", "completed_at": "2025-04-04T20:38:47.375663Z"}, {"name": "execute", "started_at": "2025-04-04T20:38:47.376380Z", "completed_at": "2025-04-04T20:38:47.767412Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4026639461517334, "adapter_response": {"_message": "SUCCESS 5", "code": "SUCCESS", "rows_affected": 5}, "message": "SUCCESS 5", "failures": null, "unique_id": "model.dataforge_dbt.dim_dentist", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    dentist_id,\n    CONCAT('Dr. Zahn ', dentist_id) AS dentist_name,\n    CASE \n        WHEN MOD(dentist_id, 3) = 0 THEN 'implantologist'\n        WHEN MOD(dentist_id, 3) = 1 THEN 'orthodontist'\n        ELSE 'general dentist'\n    END AS specialization\nFROM \n    `dataforge`.`fact_appointments`", "relation_name": "`dataforge`.`dim_dentist`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-04T20:38:47.773129Z", "completed_at": "2025-04-04T20:38:47.776909Z"}, {"name": "execute", "started_at": "2025-04-04T20:38:47.777806Z", "completed_at": "2025-04-04T20:38:48.147457Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3774137496948242, "adapter_response": {"_message": "SUCCESS 545", "code": "SUCCESS", "rows_affected": 545}, "message": "SUCCESS 545", "failures": null, "unique_id": "model.dataforge_dbt.dim_patient", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    patient_id,\n    CONCAT('Patient ', patient_id) AS patient_name,\n    FLOOR(RAND() * 60) + 18 AS age,\n    CASE \n        WHEN MOD(patient_id, 2) = 0 THEN 'female'\n        ELSE 'male'\n    END AS gender\nFROM \n    `dataforge`.`fact_appointments`", "relation_name": "`dataforge`.`dim_patient`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-04T20:38:48.153793Z", "completed_at": "2025-04-04T20:38:48.159098Z"}, {"name": "execute", "started_at": "2025-04-04T20:38:48.159994Z", "completed_at": "2025-04-04T20:38:48.514355Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.36264586448669434, "adapter_response": {"_message": "SUCCESS 600", "code": "SUCCESS", "rows_affected": 600}, "message": "SUCCESS 600", "failures": null, "unique_id": "model.dataforge_dbt.dim_treatment", "compiled": true, "compiled_code": "\n\nSELECT DISTINCT\n    treatment_id,\n    CONCAT('Behandlung ', treatment_id) AS treatment_name,\n    ROUND(RAND() * 150 + 50, 2) AS base_cost\nFROM \n    `dataforge`.`fact_appointments`", "relation_name": "`dataforge`.`dim_treatment`"}], "elapsed_time": 2.468609094619751, "args": {"select": [], "favor_state": false, "log_level": "info", "strict_mode": false, "log_path": "/Users/vadimott/Documents/DataForge/dbt/logs", "macro_debugging": false, "exclude": [], "send_anonymous_usage_stats": true, "partial_parse": true, "print": true, "project_dir": "/Users/vadimott/Documents/DataForge/dbt", "require_explicit_package_overrides_for_builtin_materializations": false, "write_json": true, "log_format_file": "debug", "profiles_dir": "/Users/vadimott/Documents/DataForge/dbt", "invocation_command": "dbt run", "cache_selected_only": false, "enable_legacy_logger": false, "quiet": false, "partial_parse_file_diff": true, "use_colors": true, "defer": false, "log_level_file": "debug", "introspect": true, "show_resource_report": false, "indirect_selection": "eager", "log_format": "default", "populate_cache": true, "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "use_colors_file": true, "printer_width": 80, "version_check": true, "which": "run", "log_file_max_bytes": 10485760, "vars": {}}}